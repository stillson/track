#!/usr/bin/env python

"""
Copyright (c) 2012, Christopher Stillson
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met: 

1. Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer. 
2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution. 

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

import difflib
from optparse import OptionParser
import os
import glob
import shutil
import itertools
import time
import datetime
import json
import collections

VERSION=0.1


class RepoCreationError(Exception): pass

NullGen = (i for i in [])

class commitInfo(collections.MutableMapping):
    def __init__(self, directory):
        super(commitInfo, self).__init__()
        self.directory = directory
        #don't need setup. Will be called from an existing repo
        self.fileName = self.directory + "CommitInfo"
        if os.path.exists(self.fileName):
            with open(self.fileName, 'r') as f:
                self.infoDict = json.load(f)
        else:
            self.infoDict = {}

    def save(self):
        with open(self.fileName + ".tmp", 'w') as f:
            json.dump(self.infoDict, f)

        os.rename(self.fileName + ".tmp", self.fileName)

    def __getitem__(self, k):
        return self.infoDict[k] 

    def __setitem__(self, k, v):
        if k in self.infoDict:
            self.infoDict[k] = self.infoDict[k] + ":" + v
        else:
            self.infoDict[k] = v
        self.save()
        
    def __delitem__(self, k):
        del self.infoDict[k]
        self.save()
    
    def __contains__(self, k):
        return k in self.infoDict
        
    def __iter__(self):
        return iter(self.infoDict)

    def __len__(self):
        return len(self.infoDict)


class Repo(object):
    """Class representing a repository"""
    def __init__(self, directory):
        super(Repo, self).__init__()
        self.directory = directory + "/"
        if directory[-1] != '/':
            self.directory += '/'

        if not os.path.isdir(directory):
            os.mkdir(directory)
            
        if not os.access(directory, os.X_OK):
            raise RepoCreationError

        self.commIn = commitInfo(self.directory)

    def getFile(self, a_file):
        return RepoFile(a_file, self)
        
    def getAll(self, show_all=False):
        if show_all:
            return (os.path.basename(i) for i in glob.iglob(self.directory + '*'))
        else:
            return (os.path.basename(i)[:-3] for i in glob.iglob(self.directory + '*.01'))

    def addComment(self, k,v):
        self.commIn[k] = v

    def getComment(self, k):
        return self.commIn[k]

class RepoFile(object):
    """class representing a file in a repo"""
    def __init__(self, name, repo):
        super(RepoFile, self).__init__()
        self.name = name
        # if it doesn't exist, raise an exception
        open(name,'r')
        self.repo = repo
        self.revisions = glob.glob(repo.directory + name + ".*")
        self.revisions.sort
        self._last = None

    @property
    def last(self):
        if self._last is not None:
            return self._last

        if self.revisions:
            self._last = self.revisions[-1]
        else:
            self._last = []

        return self._last

    def newIndex(self):
        if self.last:
            return ".%02d" %(int(self.last.split('.')[-1]) + 1)
        else:
            return ".01"

    def revIndex(self):
        if len(self.revisions) > 1:
            return ".%02d" %(int(self.last.split('.')[-1]) - 1)
        else:
            return ".01"

    def update(self, comment=None):
        # if there are no diffs, don't update
        if self.last and not any(self.getDiff()):
            if comment:
                self.repo.addComment(os.path.basename(self.last), comment)
            return

        if comment:
            self.repo.addComment(os.path.basename(self.name)+self.newIndex(), comment)
        shutil.copyfile(self.name, self.repo.directory + self.name + self.newIndex())
        
    def getDiff(self):
        if self.last == []:
            # if no last, track the file and return empty generator
            self.update()
            return NullGen
            
        with open(self.last) as lFile:
            last = lFile.readlines()

        with open(self.name) as curFile:
            current = curFile.readlines()

        d = difflib.unified_diff(last, current, self.last, self.name, n=1)
        return (i.strip() for i in d)

    def diffErator(self, pairs):
        rv = itertools.chain()
        for aPair in pairs:
            revs = (os.path.basename(aPair[0]), os.path.basename(aPair[1]))
            title = ( "\n", "%s <-> %s" % revs, "--------------------")
            rv = itertools.chain(rv, title)

            with open(aPair[0]) as oldFile:
                old_lines = oldFile.readlines()

            with open(aPair[1]) as newFile:
                new_lines = newFile.readlines()

            d = difflib.unified_diff(old_lines, new_lines, aPair[0], aPair[1], n=1)
            rv = itertools.chain(rv, (i.strip() for i in d))

        return rv

    def progDiff(self):
        """Prints diffs from rev 1-2, 2-3, 3-4,.... """

        if self.last == []:
            return NullGen
             
        pairs = zip(self.revisions, self.revisions[1:]) 

        return self.diffErator(pairs)


    def fRelDiff(self):
        """Prints diffs from rev 1-2, 1-3, 1-4,.... """
        if self.last == []:
            return NullGen
             
        pairs = zip(itertools.repeat(self.revisions[0]), self.revisions[1:]) 

        return self.diffErator(pairs)

    def listRevs(self):
        def timeDel(file_name):
            return str(datetime.timedelta(seconds=int(time.time() - os.stat(file_name).st_ctime)))

        def comment(filename):
            if filename in self.repo.commIn:
                return self.repo.getComment(filename)
            return ""
               
        return (os.path.basename(i) + " " + timeDel(i) + " " + comment(os.path.basename(i)) for i in self.revisions)
        
    def revert(self):
        shutil.copyfile(self.repo.directory + self.name + self.revIndex(), self.name)

def parseArgs():
    parser = OptionParser()
    
    #parser.add_argument('in_file', metavar='file', type=str, nargs="*",
    #                   help='file to track')

    parser.add_option('-d', help = 'diff with previous',       action="store_true",)
    parser.add_option('-l', help = 'list revisions of a file', action="store_true",)
    parser.add_option('-r', help = 'list files in repo',       action="store_true",)
    parser.add_option('-R', help = 'list all files in repo',   action="store_true",)
    parser.add_option('-t', help = 'track a file (default)',   action="store_true",)
    parser.add_option('-b', help = 'revert to last version',   action="store_true",)
    parser.add_option('-p', help = 'progressive diff',         action="store_true",)
    parser.add_option('-P', help = 'full relative diff',       action="store_true",)
    parser.add_option('-c', help = 'add comment',              dest="comment")

    return parser.parse_args()

def main():
    options, args = parseArgs()

    repo = Repo(os.getcwd() + '/.track/')
    
    if options.d:
        for aFile in args:
            for d in repo.getFile(aFile).getDiff():
                print d
        return
    
    if options.l:
        for aFile in args:
            print
            print aFile
            print "---------"
            for aRev in repo.getFile(aFile).listRevs():
                print aRev
            print
        return
        
    if options.r or options.R:
        for aFile in repo.getAll(options.R):
            print aFile
        return

    if options.b:
        for aFile in args:
            repo.getFile(aFile).update() #save current
            repo.getFile(aFile).revert()
        return

    def mp(x):
        print x

    if options.p:
        for aFile in args:
            map(mp, repo.getFile(aFile).progDiff())
        return

    if options.P:
        for aFile in args:
            map(mp, repo.getFile(aFile).fRelDiff())
        return

    #default case, just track it
    for aFile in args:
        repo.getFile(aFile).update(options.comment)
        
if __name__ == '__main__':
    main()
